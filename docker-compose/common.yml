version: "3.5"
services:
  # Orion is the context broker
  orion:
    labels:
      org.fiware: 'SmartWorld'
    image: fiware/orion-ld:${ORION_LD_VERSION}
    hostname: orion
    container_name: fiware-orion
    restart: always
    depends_on:
      - mongo-db
      - ld-context
    networks:
      - default
    expose:
      - "${ORION_LD_PORT}"
    ports:
      - "${ORION_LD_PORT}:${ORION_LD_PORT}" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG -forwarding -corsOrigin __ALL
    healthcheck:
      test: curl --fail -s http://orion:${ORION_LD_PORT}/version || exit 1
      interval: 5s


  mosquitto:
    labels:
      org.fiware: 'SmartWorld'
    image: eclipse-mosquitto:1.6.14
    hostname: mosquitto
    container_name: mosquitto
    restart: always
    expose:
      - "${MOSQUITTO_PORT}"
      - "9001"
    ports:
      - "${MOSQUITTO_PORT}:${MOSQUITTO_PORT}" # localhost:1883
      - "9001:9001"
    volumes:
        - ../mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
        - ../mosquitto/mosquitto.passwd:/mosquitto/config/mosquitto.passwd
    networks:
      - default


  iot-agent:
    labels:
      org.fiware: 'SmartWorld'
    image: fiware/iotagent-json:${JSON_VERSION}
    hostname: iot-agent
    container_name: fiware-iot-agent
    restart: always
    depends_on:
      - mongo-db
      - ld-context
      - mosquitto
    networks:
      - default
    expose:
      - "${IOTA_NORTH_PORT}"
    ports:
      - "${IOTA_NORTH_PORT}:${IOTA_NORTH_PORT}" # localhost:4041
      - "${IOTA_SOUTH_PORT}:${IOTA_SOUTH_PORT}" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_CB_PORT=${ORION_LD_PORT} # port the context broker listens on to update context
      - IOTA_NORTH_PORT=${IOTA_NORTH_PORT}
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=${MONGO_DB_PORT} # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentjson # The name of the database used in mongoDB
      - IOTA_PROVIDER_URL=http://iot-agent:${IOTA_NORTH_PORT}
      - IOTA_DEFAULT_RESOURCE= # Default is blank. I'm using MQTT so I don't need a resource
      - IOTA_CB_NGSI_VERSION=ld # use NGSI-LD when sending updates for active attributes
      - IOTA_JSON_LD_CONTEXT=http://context/ngsi-context.jsonld
      - IOTA_FALLBACK_TENANT=openiot
      - IOTA_MQTT_HOST=mosquitto
      - IOTA_MQTT_PORT=1883
      - IOTA_MQTT_USERNAME=LegoDemonstrator
      - IOTA_MQTT_PASSWORD=Lego12Demo34nstr56ator
      - IOTA_MQTT_REJECT_UNAUTHORIZED=true
      - IOTA_MQTT_PROTOCOL=mqtt
      - IOTA_MQTT_QOS=0
      - IOTA_MQTT_RETAIN=false
      - IOTA_MQTT_RETRIES=2
      - IOTA_MQTT_RETRY_TIME=5
      - IOTA_MQTT_KEEPALIVE=60
      - IOTA_MQTT_AVOID_LEADING_SLASH=0
      - IOTA_MQTT_CLIENT_ID=iotagent
    healthcheck:
      interval: 5s


  quantumleap:
    labels:
      org.fiware: 'SmartWorld'
    image: orchestracities/quantumleap:${QUANTUMLEAP_VERSION}
    hostname: quantumleap
    container_name: fiware-quantumleap
    depends_on:
      - crate-db
      - redis-db
    networks:
      - default
    ports:
      - "${QUANTUMLEAP_PORT}:${QUANTUMLEAP_PORT}"
    environment:
      - CRATE_HOST=crate-db
      - REDIS_HOST=redis-db
      - REDIS_PORT=${REDIS_PORT}
      - LOGLEVEL=DEBUG
    healthcheck:
      test: curl --fail -s http://quantumleap:${QUANTUMLEAP_PORT}/version || exit 1


  ld-context:
    labels:
      org.fiware: 'SmartWorld'
    image: httpd:alpine
    hostname: context
    container_name: fiware-ld-context
    restart: always
    ports:
      - "3004:80"
    volumes:
      - ../data-models:/usr/local/apache2/htdocs/
    networks:
      - default
    healthcheck:
      test: (wget --server-response --spider --quiet  http://ld-context/ngsi-context.jsonld 2>&1 | awk 'NR==1{print $$2}'|  grep -q -e "200") || exit 1


  redis-db:
    labels:
      org.fiware: 'SmartWorld'
    image: redis:${REDIS_VERSION}
    hostname: redis-db
    container_name: db-redis
    networks:
      - default
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}" # localhost:6379
    volumes:
      - redis-db:/data
    healthcheck:
      test: ["CMD", "redis-cli","ping"]
      interval: 10s


  crate-db:
    labels:
      org.fiware: 'SmartWorld'
    image: crate:${CRATE_VERSION}
    hostname: crate-db
    container_name: db-crate
    ports:
      # Admin UI
      - "4200:4200"
      # Transport protocol
      - "4300:4300"
    command: crate -Cauth.host_based.enabled=false  -Ccluster.name=democluster -Chttp.cors.enabled=true -Chttp.cors.allow-origin="*" -Cnetwork.host=_site_
    environment:
      - CRATE_HEAP_SIZE=2g # see https://crate.io/docs/crate/howtos/en/latest/deployment/containers/docker.html#troubleshooting
    volumes:
      - crate-db:/data


  grafana:
    labels:
      org.fiware: 'SmartWorld'
    image: grafana/grafana:9.4.2 # grafana/grafana:6.1.6
    container_name: grafana
    restart: always
    depends_on:
      - crate-db
    ports:
      - "3003:3000"
    environment:
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
    #  - GF_INSTALL_PLUGINS=https://github.com/orchestracities/grafana-map-plugin/archive/master.zip;grafana-map-plugin,grafana-clock-panel,grafana-worldmap-panel
    volumes:
      - grafana:/var/lib/grafana

  proxy:
    labels:
      org.fiware: 'SmartWorld'
    build:
      context: ./proxy
      dockerfile: Dockerfile
    hostname: proxy
    ports:
     - "8080:8080"
    container_name: smartworld-proxy
    depends_on:
     - orion
    networks:
      - default
    restart: always

  frontend:
    labels:
      org.fiware: 'SmartWorld'
    build:
      context: ./FIWARE-SmartWorldFrontend
      dockerfile: Dockerfile
    hostname: frontend
    ports:
     - "8000:8000"
    container_name: smartworld-frontend
    depends_on:
     - orion
    networks:
      - default
    restart: always

volumes:
  crate-db: ~
  redis-db: ~
  grafana: ~
  mongo-db: ~
  mongo-config: ~
  data-models:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${PWD}/data-models


networks:
  default:
    labels:
      org.fiware: 'SmartWorld'
    ipam:
      config:
        - subnet: 172.18.1.0/24